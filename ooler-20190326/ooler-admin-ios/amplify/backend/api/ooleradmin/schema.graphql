#
# OOLER database v2 schema.graphql
#

#####################
# Models
#####################

# User
type User @model {
  id: ID!
  #DeviceList(limit: Int, nextToken: String): DeviceConnection
  DeviceList: [DeviceUser] @connection(name: "UserDeviceUsers")
  #RatingList(limit: Int, nextToken: String): RatingConnection
  RatingList: [Rating] @connection(name: "UserRatings")
  email: AWSEmail
  name: String!
}

type DeviceUser @model {
  id: ID!
  device: Device! @connection(name: "DeviceDeviceUsers")
  users: User! @connection(name: "UserDeviceUsers")
  macId: String!
}

# Device
type Device @model {
  id: ID!
#  DeviceDataList(limit: Int, nextToken: String): DeviceDataConnection
#  DeviceDetailsList(limit: Int, nextToken: String): DeviceDetailsConnection
  deviceUsers: [DeviceUser] @connection(name: "DeviceDeviceUsers")
#  ScheduleList(limit: Int, nextToken: String): ScheduleConnection
  ScheduleList: [Schedule] @connection(name: "DeviceSchedules")
  deviceOriginalName: String!
  deviceUpdatedName: String!
#  macId: String!
#  userId: ID!
  logs: [DeviceLog] @connection(name: "DeviceDeviceLogs")
}

# DeviceData
#type DeviceData @model {
#  id: ID!
#  deviceOrigionalName: String!
#  deviceUpdatedName: String!
#}

# DeviceDetails
#type DeviceDetails @model {
#  deviceDetailsId: String!
#  deviceId: ID!
#  deviceName: String
#  power: Int
#  tempUnit: String
#  temperature: Int
#}

# Schedule
type Schedule @model {
  id: ID!
#  AdvanceScheduleList(limit: Int, nextToken: String): AdvanceScheduleConnection
  AdvanceScheduleList: [AdvanceSchedule] @connection(name: "ScheduleAdvancedSchedules")
  bedTimeInSec: String
#  bedTimeReminder: Boolean!
  bleDays: String!
  daysInArray: AWSJSON!
  # deviceOrigionalName: String!
  device: Device! @connection(name: "DeviceSchedules")
  isActive: Boolean!
  scheduleDsn: String
  scheduleName: String!
  scheduleStorageId: Int
  sleepTimeHour: Int
  sleepTimeMin: Int
  sleepTimeUnit: String
  storageId: String!
  temperature: Int
  temperatureUnit: String
  type: String
  upTimeHour: Int
  upTimeInSec: String
  upTimeMin: Int
  upTimeUnit: String
  warmAwake: Boolean!
}

# AdvancedSchedule
type AdvanceSchedule @model {
  id: ID!
  hour: Int!
  min: Int!
  prefixDate: String!
  schedule: Schedule! @connection(name: "ScheduleAdvancedSchedules")
  temp: Int!
  tempUnit: String!
  timeInSec: String
  timeUnit: String!
}

# DeviceLogs
type DeviceLog @model {
  id: ID!
  description: String!
# deviceId: ID!
  device: Device! @connection(name: "DeviceDeviceLogs")
  logEntry: String!
  timeStamp: String!
}

# AppUsage
#type AppUsage @model {
#  id: ID!
#  parameters: String!
#  timestamp: String!
#  userId: String!
#}

# Integrations
#type Integrations @model {
#  id: ID!
#  integrationKey: String!
#  parameters: String!
#  timestamp: String!
#  userId: String!
#}

# Rating @model
type Rating @model {
  id: ID!
  ratingCount: Int!
  ratingTime: String!
  user: User! @connection(name: "UserRatings")
}

#
##
###
####
#####
######
#######
########
#########
##########
################################
################### STOP #######
################################

















#####################
# Connections
#####################

#type AdvanceScheduleConnection {
#  items: [AdvanceSchedule]
#  nextToken: String
#}
#
#type AppUsageConnection {
#  items: [AppUsage]
#  nextToken: String
#}
#
#type DeviceConnection {
#  items: [Device]
#  nextToken: String
#}
#
#type DeviceDataConnection {
#  items: [DeviceData]
#  nextToken: String
#}
#
#type DeviceDetailsConnection {
#  items: [DeviceDetails]
#  nextToken: String
#}
#
#type DeviceLogConnection {
#  items: [DeviceLog]
#  nextToken: String
#}
#
#type IntegrationsConnection {
#  items: [Integrations]
#  nextToken: String
#}
#
#type RatingConnection {
#  items: [Rating]
#  nextToken: String
#}
#
#type ScheduleConnection {
#  items: [Schedule]
#  nextToken: String
#}
#
#type UserConnection {
#  items: [User]
#  nextToken: String
#}

#####################
# Inputs
#####################

#input CreateAdvanceScheduleInput {
#  advanceScheduleId: String!
#  hour: Int!
#  min: Int!
#  prefixDate: String!
#  scheduleId: ID!
#  temp: Int!
#  tempUnit: String!
#  timeInSec: String
#  timeUnit: String!
#}
#
#input CreateAppUsageInput {
#  appUsageId: String!
#  parameters: String!
#  timestamp: String!
#  userId: String!
#}
#
#input CreateDeviceDataInput {
#  deviceOrigionalName: String!
#  deviceUpdatedName: String!
#}
#
#input CreateDeviceDetailsInput {
#  deviceDetailsId: String!
#  deviceId: ID!
#  deviceName: String
#  power: Int
#  tempUnit: String
#  temperature: Int
#}
#
#input CreateDeviceInput {
#  deviceId: String!
#  deviceOrigionalName: String!
#  macId: String!
#  userId: ID!
#}
#
#input CreateDeviceLogInput {
#  description: String!
#  deviceId: ID!
#  logEntry: String!
#  logId: String!
#  timeStamp: String!
#}
#
#input CreateIntegrationsInput {
#  integrationId: String!
#  integrationKey: String!
#  parameters: String!
#  timestamp: String!
#  userId: String!
#}
#
#input CreateRatingInput {
#  ratingCount: Int!
#  ratingId: String!
#  ratingTime: String!
#  userId: ID!
#}
#
#input CreateScheduleInput {
#  bedTimeInSec: String
#  bedTimeReminder: Boolean!
#  bleDays: String!
#  daysInArray: AWSJSON!
#  deviceOrigionalName: String!
#  isActive: Boolean
#  scheduleDsn: String
#  scheduleId: String!
#  scheduleName: String!
#  scheduleStorageId: Int
#  sleepTimeHour: Int
#  sleepTimeMin: Int
#  sleepTimeUnit: String
#  storageId: String!
#  temperature: Int
#  temperatureUnit: String
#  type: String
#  upTimeHour: Int
#  upTimeInSec: String
#  upTimeMin: Int
#  upTimeUnit: String
#  warmAwake: Boolean!
#}
#
#input CreateUserInput {
#  email: AWSEmail
#  name: String!
#  userId: ID!
#}
#
#input DeleteAdvanceScheduleInput {
#  advanceScheduleId: ID!
#}
#
#input DeleteAppUsageInput {
#  appUsageId: String!
#}
#
#input DeleteDeviceDataInput {
#  deviceOriginalName: String!
#}
#
#input DeleteDeviceDetailsInput {
#  deviceDetailsId: ID!
#}
#
#input DeleteDeviceInput {
#  deviceId: ID!
#}
#
#input DeleteDeviceLogInput {
#  logId: String!
#}
#
#input DeleteIntegrationsInput {
#  integrationId: String!
#}
#
#input DeleteRatingInput {
#  ratingId: ID!
#}
#
#input DeleteScheduleInput {
#  scheduleId: ID!
#}
#
#input DeleteUserInput {
#  userId: ID!
#}
#
#input TableAdvanceScheduleFilterInput {
#  advanceScheduleId: TableIDFilterInput
#  hour: TableIntFilterInput
#  min: TableIntFilterInput
#  prefixDate: TableStringFilterInput
#  scheduleId: TableIDFilterInput
#  temp: TableIntFilterInput
#  tempUnit: TableStringFilterInput
#  timeInSec: TableStringFilterInput
#  timeUnit: TableStringFilterInput
#}
#
#input TableAppUsageFilterInput {
#  appUsageId: TableStringFilterInput
#  parameters: TableStringFilterInput
#  timestamp: TableStringFilterInput
#  userId: TableStringFilterInput
#}
#
#input TableBooleanFilterInput {
#  eq: Boolean
#  ne: Boolean
#}
#
#input TableDeviceDataFilterInput {
#  deviceOrigionalName: TableStringFilterInput
#  deviceUpdatedName: TableStringFilterInput
#}
#
#input TableDeviceDetailsFilterInput {
#  deviceDetailsId: TableIDFilterInput
#  deviceId: TableIDFilterInput
#  deviceName: TableStringFilterInput
#  power: TableIntFilterInput
#  tempUnit: TableStringFilterInput
#  temperature: TableIntFilterInput
#}
#
#input TableDeviceFilterInput {
#  deviceId: TableIDFilterInput
#  deviceOrigionalName: TableStringFilterInput
#  macId: TableStringFilterInput
#  userId: TableIDFilterInput
#}
#
#input TableDeviceLogFilterInput {
#  description: TableStringFilterInput
#  deviceId: TableIDFilterInput
#  logEntry: TableStringFilterInput
#  logId: TableStringFilterInput
#  timeStamp: TableStringFilterInput
#}
#
#input TableFloatFilterInput {
#  between: [Float]
#  contains: Float
#  eq: Float
#  ge: Float
#  gt: Float
#  le: Float
#  lt: Float
#  ne: Float
#  notContains: Float
#}
#
#input TableIDFilterInput {
#  beginsWith: ID
#  between: [ID]
#  contains: ID
#  eq: ID
#  ge: ID
#  gt: ID
#  le: ID
#  lt: ID
#  ne: ID
#  notContains: ID
#}
#
#input TableIntFilterInput {
#  between: [Int]
#  contains: Int
#  eq: Int
#  ge: Int
#  gt: Int
#  le: Int
#  lt: Int
#  ne: Int
#  notContains: Int
#}
#
#input TableIntegrationsFilterInput {
#  integrationId: TableStringFilterInput
#  integrationKey: TableStringFilterInput
#  parameters: TableStringFilterInput
#  timestamp: TableStringFilterInput
#  userId: TableStringFilterInput
#}
#
#input TableRatingFilterInput {
#  ratingCount: TableIntFilterInput
#  ratingId: TableIDFilterInput
#  ratingTime: TableStringFilterInput
#  userId: TableIDFilterInput
#}
#
#input TableScheduleFilterInput {
#  bedTimeInSec: TableStringFilterInput
#  bedTimeReminder: TableBooleanFilterInput
#  bleDays: TableStringFilterInput
#  daysInArray: TableStringFilterInput
#  deviceOrigionalName: TableStringFilterInput
#  isActive: TableBooleanFilterInput
#  scheduleDsn: TableStringFilterInput
#  scheduleId: TableIDFilterInput
#  scheduleName: TableStringFilterInput
#  scheduleStorageId: TableIntFilterInput
#  sleepTimeHour: TableIntFilterInput
#  sleepTimeMin: TableIntFilterInput
#  sleepTimeUnit: TableStringFilterInput
#  storageId: TableStringFilterInput
#  temperature: TableIntFilterInput
#  temperatureUnit: TableStringFilterInput
#  type: TableStringFilterInput
#  upTimeHour: TableIntFilterInput
#  upTimeInSec: TableStringFilterInput
#  upTimeMin: TableIntFilterInput
#  upTimeUnit: TableStringFilterInput
#  warmAwake: TableBooleanFilterInput
#}
#
#input TableStringFilterInput {
#  beginsWith: String
#  between: [String]
#  contains: String
#  eq: String
#  ge: String
#  gt: String
#  le: String
#  lt: String
#  ne: String
#  notContains: String
#}
#
#input TableUserFilterInput {
#  email: TableStringFilterInput
#  name: TableStringFilterInput
#  userId: TableIDFilterInput
#}
#
#input UpdateAdvanceScheduleInput {
#  advanceScheduleId: ID!
#  hour: Int
#  min: Int
#  prefixDate: String
#  scheduleId: ID!
#  temp: Int
#  tempUnit: String
#  timeInSec: String
#  timeUnit: String
#}
#
#input UpdateAppUsageInput {
#  appUsageId: String!
#  parameters: String
#  timestamp: String
#  userId: String
#}
#
#input UpdateDeviceDataInput {
#  deviceOrigionalName: String!
#  deviceUpdatedName: String
#}
#
#input UpdateDeviceDetailsInput {
#  deviceDetailsId: ID!
#  deviceId: ID!
#  deviceName: String
#  power: Int
#  tempUnit: String
#  temperature: Int
#}
#
#input UpdateDeviceInput {
#  deviceId: ID!
#  deviceOrigionalName: String
#  macId: String
#  userId: ID!
#}
#
#input UpdateDeviceLogInput {
#  description: String
#  deviceId: ID
#  logEntry: String
#  logId: String!
#  timeStamp: String
#}
#
#input UpdateIntegrationsInput {
#  integrationId: String!
#  integrationKey: String
#  parameters: String
#  timestamp: String
#  userId: String
#}
#
#input UpdateRatingInput {
#  ratingCount: Int
#  ratingId: ID!
#  ratingTime: String
#  userId: ID!
#}
#
#input UpdateScheduleInput {
#  bedTimeInSec: String
#  bedTimeReminder: Boolean
#  bleDays: String
#  daysInArray: AWSJSON!
#  deviceOrigionalName: String!
#  isActive: Boolean
#  scheduleDsn: String
#  scheduleId: ID!
#  scheduleName: String
#  scheduleStorageId: Int
#  sleepTimeHour: Int
#  sleepTimeMin: Int
#  sleepTimeUnit: String
#  storageId: String!
#  temperature: Int
#  temperatureUnit: String
#  type: String
#  upTimeHour: Int
#  upTimeInSec: String
#  upTimeMin: Int
#  upTimeUnit: String
#  warmAwake: Boolean
#}
#
#input UpdateUserInput {
#  email: AWSEmail
#  name: String
#  userId: ID!
#}


#####################
# Results
#####################

#type AdvanceScheduleResult {
#  SyncAdvanceScheduleTable: [AdvanceSchedule]
#}
#
#type DeviceLogResult {
#  SyncDeviceLogTable: [DeviceLog]
#}

#####################
# Queries
#####################

#type Query {
#  getAdvanceSchedule(advanceScheduleId: ID!, scheduleId: ID!): AdvanceSchedule
#  getAppUsage(appUsageId: String!): AppUsage
#  getDevice(deviceId: ID!, userId: ID!): Device
#  getDeviceByAddress(deviceOrigionalName: String!, userId: ID!): DeviceConnection
#  getDeviceData(deviceOrigionalName: String!): DeviceData
#  getDeviceDetails(deviceDetailsId: ID!, deviceId: ID!): DeviceDetails
#  getDeviceLog(logId: String!): DeviceLog
#  getIntegrations(integrationId: String!): Integrations
#  getRating(ratingTime: String!, userId: ID!): RatingConnection
#  getSchedule(deviceOrigionalName: String!, scheduleId: ID!): Schedule
#  getUser(userId: ID!): User
#  listAdvanceSchedules(filter: TableAdvanceScheduleFilterInput, limit: Int, nextToken: String): AdvanceScheduleConnection
#  listAppUsages(filter: TableAppUsageFilterInput, limit: Int, nextToken: String): AppUsageConnection
#  listDeviceData(filter: TableDeviceDataFilterInput, limit: Int, nextToken: String): DeviceDataConnection
#  listDeviceDetails(deviceId: ID!, filter: TableDeviceDetailsFilterInput, limit: Int, nextToken: String): DeviceDetailsConnection
#  listDeviceLogs(filter: TableDeviceLogFilterInput, limit: Int, nextToken: String): DeviceLogConnection
#  listDevices(filter: TableDeviceFilterInput, limit: Int, nextToken: String, userId: ID!): DeviceConnection
#  listIntegrations(filter: TableIntegrationsFilterInput, limit: Int, nextToken: String): IntegrationsConnection
#  listRatings(filter: TableRatingFilterInput, limit: Int, nextToken: String, userId: ID!): RatingConnection
#  listSchedules(deviceOrigionalName: String!, filter: TableScheduleFilterInput, limit: Int, nextToken: String): ScheduleConnection
#  listUsers(filter: TableUserFilterInput, limit: Int, nextToken: String, userId: ID!): UserConnection
#  queryAdvanceScheduleIdScheduleIdIndex(advanceScheduleId: ID!, after: String, first: Int): AdvanceScheduleConnection
#  queryAppUsagesByAppUsageIdUserIdIndex(after: String, first: Int, userId: String!): AppUsageConnection
#  queryDeviceDetailsIdDeviceIdIndex(after: String, deviceDetailsId: ID!, first: Int): DeviceDetailsConnection
#  queryDeviceIdUserIdIndex(after: String, deviceId: ID!, first: Int): DeviceConnection
#  queryDeviceLogsByLogIdUserIdIndex(after: String, first: Int, userId: ID!): DeviceLogConnection
#  queryDeviceOrigionalNameScheduleIdIndex(after: String, first: Int, scheduleId: ID!): ScheduleConnection
#  queryIntegrationsByIntegrationIdUserIdIndex(after: String, first: Int, userId: String!): IntegrationsConnection
#  queryRatingIdUserIdIndex(after: String, first: Int, ratingId: ID!): RatingConnection
#}


#####################
# Mutations
#####################

#type Mutation {
#  createAdvanceSchedule(input: CreateAdvanceScheduleInput!): AdvanceSchedule
#  createAppUsage(input: CreateAppUsageInput!): AppUsage
#  createBatchAdvanceSchedule(tempSchedules: [CreateAdvanceScheduleInput!]): AdvanceScheduleResult
#  createBatchDeviceLog(tempDeviceLog: [CreateDeviceLogInput!]): DeviceLogResult
#  createDevice(input: CreateDeviceInput!): Device
#  createDeviceData(input: CreateDeviceDataInput!): DeviceData
#  createDeviceDetails(input: CreateDeviceDetailsInput!): DeviceDetails
#  createDeviceLog(input: CreateDeviceLogInput!): DeviceLog
#  createIntegrations(input: CreateIntegrationsInput!): Integrations
#  createRating(input: CreateRatingInput!): Rating
#  createSchedule(input: CreateScheduleInput!): Schedule
#  createUser(input: CreateUserInput!): User
#  deleteAdvanceSchedule(advanceScheduleIds: [DeleteAdvanceScheduleInput!]): [AdvanceSchedule!]
#  deleteAppUsage(input: DeleteAppUsageInput!): AppUsage
#  deleteDevice(input: DeleteDeviceInput!): Device
#  deleteDeviceData(input: DeleteDeviceDataInput!): DeviceData
#  deleteDeviceDetails(input: DeleteDeviceDetailsInput!): DeviceDetails
#  deleteDeviceLog(input: DeleteDeviceLogInput!): DeviceLog
#  deleteIntegrations(input: DeleteIntegrationsInput!): Integrations
#  deleteRating(input: DeleteRatingInput!): Rating
#  deleteSchedule(input: DeleteScheduleInput!): Schedule
#  deleteScheduleList(scheduleIds: [DeleteScheduleInput!]): [Schedule!]
#  deleteUser(input: DeleteUserInput!): User
#  updateAdvanceSchedule(input: UpdateAdvanceScheduleInput!): AdvanceSchedule
#  updateAppUsage(input: UpdateAppUsageInput!): AppUsage
#  updateDevice(input: UpdateDeviceInput!): Device
#  updateDeviceData(input: UpdateDeviceDataInput!): DeviceData
#  updateDeviceDetails(input: UpdateDeviceDetailsInput!): DeviceDetails
#  updateDeviceLog(input: UpdateDeviceLogInput!): DeviceLog
#  updateIntegrations(input: UpdateIntegrationsInput!): Integrations
#  updateRating(input: UpdateRatingInput!): Rating
#  updateSchedule(input: UpdateScheduleInput!): Schedule
#  updateUser(input: UpdateUserInput!): User
#}


#####################
# Subscriptions
#####################

#type Subscription {
#  onCreateAdvanceSchedule(advanceScheduleId: ID, hour: Int, min: Int, scheduleId: ID, temp: Int): AdvanceSchedule @aws_subscribe(mutations : ["createAdvanceSchedule"])
#  onCreateAppUsage(appUsageId: String, parameters: String, timestamp: String, userId: String): AppUsage @aws_subscribe(mutations : ["createAppUsage"])
#  onCreateDevice(deviceId: ID, deviceOrigionalName: String, macId: String, userId: ID): Device @aws_subscribe(mutations : ["createDevice"])
#  onCreateDeviceData(deviceOrigionalName: String, deviceUpdatedName: String): DeviceData @aws_subscribe(mutations : ["createDeviceData"])
#  onCreateDeviceDetails(deviceDetailsId: ID, deviceId: ID, deviceName: String, power: Int, temperature: Int): DeviceDetails @aws_subscribe(mutations : ["createDeviceDetails"])
#  onCreateDeviceLog(description: String, deviceId: ID, logEntry: String, logId: String, timeStamp: String): DeviceLog @aws_subscribe(mutations : ["createDeviceLog"])
#  onCreateIntegrations(integrationId: String, integrationKey: String, parameters: String, timestamp: String, userId: String): Integrations @aws_subscribe(mutations : ["createIntegrations"])
#  onCreateRating(ratingCount: Int, ratingId: ID, ratingTime: String, userId: ID): Rating @aws_subscribe(mutations : ["createRating"])
#  onCreateSchedule(deviceOrigionalName: String, scheduleId: ID, scheduleName: String, sleepTimeHour: Int, sleepTimeMin: Int): Schedule @aws_subscribe(mutations : ["createSchedule"])
#  onCreateUser(email: AWSEmail, name: String, userId: ID): User @aws_subscribe(mutations : ["createUser"])
#  onDeleteAdvanceSchedule(advanceScheduleId: ID, hour: Int, min: Int, scheduleId: ID, temp: Int): AdvanceSchedule @aws_subscribe(mutations : ["deleteAdvanceSchedule"])
#  onDeleteAppUsage(appUsageId: String, parameters: String, timestamp: String, userId: String): AppUsage @aws_subscribe(mutations : ["deleteAppUsage"])
#  onDeleteDevice(deviceId: ID, deviceOrigionalName: String, macId: String, userId: ID): Device @aws_subscribe(mutations : ["deleteDevice"])
#  onDeleteDeviceData(deviceOrigionalName: String, deviceUpdatedName: String): DeviceData @aws_subscribe(mutations : ["deleteDeviceData"])
#  onDeleteDeviceDetails(deviceDetailsId: ID, deviceId: ID, deviceName: String, power: Int, temperature: Int): DeviceDetails @aws_subscribe(mutations : ["deleteDeviceDetails"])
#  onDeleteDeviceLog(description: String, deviceId: ID, logEntry: String, logId: String, timeStamp: String): DeviceLog @aws_subscribe(mutations : ["deleteDeviceLog"])
#  onDeleteIntegrations(integrationId: String, integrationKey: String, parameters: String, timestamp: String, userId: String): Integrations @aws_subscribe(mutations : ["deleteIntegrations"])
#  onDeleteRating(ratingCount: Int, ratingId: ID, ratingTime: String, userId: ID): Rating @aws_subscribe(mutations : ["deleteRating"])
#  onDeleteSchedule(deviceOrigionalName: String, scheduleId: ID, scheduleName: String, sleepTimeHour: Int, sleepTimeMin: Int): Schedule @aws_subscribe(mutations : ["deleteSchedule"])
#  onDeleteUser(email: AWSEmail, name: String, userId: ID): User @aws_subscribe(mutations : ["deleteUser"])
#  onUpdateAdvanceSchedule(advanceScheduleId: ID, hour: Int, min: Int, scheduleId: ID, temp: Int): AdvanceSchedule @aws_subscribe(mutations : ["updateAdvanceSchedule"])
#  onUpdateAppUsage(appUsageId: String, parameters: String, timestamp: String, userId: String): AppUsage @aws_subscribe(mutations : ["updateAppUsage"])
#  onUpdateDevice(deviceId: ID, deviceOrigionalName: String, macId: String, userId: ID): Device @aws_subscribe(mutations : ["updateDevice"])
#  onUpdateDeviceData(deviceOrigionalName: String, deviceUpdatedName: String): DeviceData @aws_subscribe(mutations : ["updateDeviceData"])
#  onUpdateDeviceDetails(deviceDetailsId: ID, deviceId: ID, deviceName: String, power: Int, temperature: Int): DeviceDetails @aws_subscribe(mutations : ["updateDeviceDetails"])
#  onUpdateDeviceLog(description: String, deviceId: ID, logEntry: String, logId: String, timeStamp: String): DeviceLog @aws_subscribe(mutations : ["updateDeviceLog"])
#  onUpdateIntegrations(integrationId: String, integrationKey: String, parameters: String, timestamp: String, userId: String): Integrations @aws_subscribe(mutations : ["updateIntegrations"])
#  onUpdateRating(ratingCount: Int, ratingId: ID, ratingTime: String, userId: ID): Rating @aws_subscribe(mutations : ["updateRating"])
#  onUpdateSchedule(deviceOrigionalName: String, scheduleId: ID, scheduleName: String, sleepTimeHour: Int, sleepTimeMin: Int): Schedule @aws_subscribe(mutations : ["updateSchedule"])
#  onUpdateUser(email: AWSEmail, name: String, userId: ID): User @aws_subscribe(mutations : ["updateUser"])
#}
