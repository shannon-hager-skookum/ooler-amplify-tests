type User @model {
  deviceList: [DeviceUser] @connection(name: "UserDevices")
  ratingList(limit: Int, nextToken: String): [Rating] @connection(name: "UserRatings")
  integrationList: [Integration] @connection(name: "UserIntegrations")
  email: AWSEmail
  name: String!
  createdAt: String
  updatedAt: String
  userId: ID!
}

type AppUsage @model {
  appUsageId: String!
  parameters: String!
  timestamp: String!
  userId: String!
}

type Rating @model {
  ratingCount: Int!
  ratingId: String!
  ratingTime: String!
  user: User! @connection(name: "UserRatings")
}

type Device @model {
  deviceId: String!
  deviceOrigionalName: String!
  deviceName: String!
  macId: String!
  userList: [DeviceUser] @connection(name: "DeviceUsers")
  scheduleList: [Schedule] @connection(name: "DeviceSchedules")
  power: Int
  tempUnit: String
  temperature: Int
  createdAt: String
  updatedAt: String
}

type PreviousDevice @model {
  deviceId: String!
  userId: String!
  createdAt: String
  updatedAt: String
}

# Create a join model and disable queries as you don't need them
# this is required due to amplify cli lack of many-to-many support
# tracked here https://github.com/aws-amplify/amplify-cli/issues/91
# documented here https://aws-amplify.github.io/docs/cli/graphql?sdk=iok#connection (under many-to-many heading)
type DeviceUser @model(queries: null) {
  id: ID!
  device: Device! @connection(name: "DeviceUsers")
  user: User! @connection(name: "UserDevices")
}

type Integration @model {
  integrationId: String!
  integrationKey: String!
  parameters: String!
  createdAt: String
  updatedAt: String
  user: User! @connection(name: "UserIntegrations")
}

type DeviceLog @model {
  deviceId: ID!
  description: String!
  logEntry: String!
  logId: String!
  timeStamp: String!
}

type Schedule @model {
  advanceScheduleList: [AdvanceSchedule] @connection(name: "ScheduleAdvancedSchedules")
  bedTimeInSec: String
  bleDays: String!
  daysInArray: AWSJSON!
  isActive: Boolean
  scheduleDsn: String
  scheduleId: String!
  scheduleName: String!
  scheduleStorageId: Int
  sleepTimeHour: Int
  sleepTimeMin: Int
  sleepTimeUnit: String
  storageId: String!
  temperature: Int
  temperatureUnit: String
  type: String
  upTimeHour: Int
  upTimeInSec: String
  upTimeMin: Int
  upTimeUnit: String
  warmAwake: Boolean!
  device: Device! @connection(name: "DeviceSchedules")
}

type AdvanceSchedule @model {
  advanceScheduleId: String!
  hour: Int!
  min: Int!
  prefixDate: String!
  schedule: Schedule! @connection(name: "ScheduleAdvancedSchedules")
  temp: Int!
  tempUnit: String!
  timeInSec: String
  timeUnit: String!
}
